<structure collectionName="processActions" comment="When you have a repeatable action that has child actions, when the child actions occur, they are linked to the LAST unlockedinstance of the parent.&#10;For example: check a particular remote state (e.g. document signature) until it is signed, then we can continue.&#10;Note that there is no min occurs because the flow pathing will determine whether it can be skipped or not." name="processAction">
    <field name="id" pattern="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|[0-9a-fA-F]{32}" primaryKey="true" type="java.util.UUID"/>
    <field comment="The name of this step" minOccurs="0" name="name" type="java.lang.String"/>
    <field minOccurs="0" name="summary" type="java.lang.String"/>
    <field comment="A short description, it can use variables that will be filled in from the capture" minOccurs="0" name="description" type="java.lang.String"/>
    <field comment="Actions can have references for logical naming" minOccurs="0" name="reference" type="java.lang.String"/>
    <field foreignKey="nabu.frameworks.process.database.types.processState:id" indexed="true" name="processStateId" pattern="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|[0-9a-fA-F]{32}" type="java.util.UUID"/>
    <field comment="Wether or not the process engine should proactively run the action or wait until it occurs" minOccurs="0" name="automatic" type="java.lang.Boolean"/>
    <field comment="When automatic is turned on, do we want it to be run synchronously or asynchronously?" minOccurs="0" name="synchronous" type="java.lang.Boolean"/>
    <field comment="If it is reprocessable, we will store the input" minOccurs="0" name="reprocessable" type="java.lang.Boolean"/>
    <field comment="You can set a delay on the action to be executed" minOccurs="0" name="delay" type="be.nabu.libs.types.base.Duration"/>
    <field comment="You can execute this action according to a schedule" minOccurs="0" name="schedule" type="java.lang.String"/>
    <field comment="How many times it can be run (0 = unlimited), default is 1" minOccurs="0" name="maxOccurs" type="java.lang.Long"/>
    <field comment="When it is marked as a singleton and it has a maxoccurs of &gt; 1, the previous running instances (and their children) are locked." minOccurs="0" name="singleton" type="java.lang.Boolean"/>
    <field comment="An action can be repeated until a certain condition is met. This condition must be derived from the captured variables." minOccurs="0" name="repeatUntil" type="java.lang.String"/>
    <field comment="The permission (if any) that the actor must have to execute this" minOccurs="0" name="permission" type="java.lang.String"/>
    <field minOccurs="0" name="style" type="java.lang.String"/>
    <field comment="There are a number of action types, for example a service call is an action type, so is a finalizer." name="actionType" type="java.lang.String"/>
    <field comment="Additional configuration for that given action type" minOccurs="0" name="configuration" type="java.lang.String"/>
    <field comment="If it's a service action, the service id to track. A dedicated field for fast lookup." minOccurs="0" name="serviceId" type="java.lang.String"/>
    <field minOccurs="0" name="signalId" type="java.lang.String"/>
    <field comment="Actions usually revolve around data: the input of a service, a signal body, a human task body,... When relevant, this is the data type id." minOccurs="0" name="dataTypeId" type="java.lang.String"/>
    <field comment="When permissions are necessary, you can set a context id query to extract a context id from the process parameters" minOccurs="0" name="contextIdQuery" type="java.lang.String"/>
    <field comment="If the action is set to lax, we will not stop the service from executing if not allowed, we simply don't log it" minOccurs="0" name="lax" type="java.lang.Boolean"/>
    <field comment="If strict is set and no process is found, we throw an exception" minOccurs="0" name="strict" type="java.lang.Boolean"/>
    <field comment="Defaults are: correlationId, userId, deviceId, sessionId, custom. Once custom you need to set up captures." minOccurs="0" name="identificationType" type="java.lang.String"/>
    <field comment="A list of key value pairs that contain optional data binding for this action" minOccurs="0" name="dataBinding" type="java.lang.String"/>
    <field comment="The global reference id remains static between versions" name="globalReferenceId" pattern="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|[0-9a-fA-F]{32}" type="java.util.UUID"/>
    <field comment="Additional comments you want to make" minOccurs="0" name="comment" type="java.lang.String"/>
    <field comment="You can set a capture condition. If set, it must return true, otherwise we ignore this. The condition is executed at the START of the service. This is run before we try to even match to any process instance and based only on the input of the process." minOccurs="0" name="condition" type="java.lang.String"/>
    <field comment="In some cases we expect periodic errors to occur and want to ignore them. We set this immediately to failed." minOccurs="0" name="autoFail" type="java.lang.Boolean"/>
    <field comment="You can run actions on separate queues (e.g. emails on an email queue)" minOccurs="0" name="queue" type="java.lang.String"/>
    <field comment="Stable code to identify this action. Use this programmatically if necessary." minOccurs="0" name="code" type="java.lang.String"/>
    <field comment="If this resolves to true, we want to force the process to run this action even if it is not allowed. For instance some processes model actual real-life processes. We can't alter reality (yet) so we must allow it but we do want to flag it." minOccurs="0" name="forceCondition" type="java.lang.String"/>
    <field comment="When forcing execution, there are a number of strategies to use. &quot;actionOnly&quot; only forces the action to be run within the current state instance (even if it is the wrong type). &quot;actionAndState&quot; will force a new state instance of the correct type to be routed even if it is routed already" minOccurs="0" name="forceStrategy" type="java.lang.String"/>
    <field comment="A service implementation that checks whether this action is allowed" minOccurs="0" name="checkPermissionId" type="java.lang.String"/>
    <field comment="You can set a condition which (based on the data we have) will determine that the step did not succeed even though it appears to have succeeded." minOccurs="0" name="errorCondition" type="java.lang.String"/>
    <field comment="Do you want to allow manual triggering of this action?" minOccurs="0" name="manual" type="java.lang.Boolean"/>
    <field comment="Link the process to the user currently executing the action" minOccurs="0" name="linkToUser" type="java.lang.Boolean"/>
    <field comment="When running an action manually some input parameters may be pre-mapped restricting the actual choices of the user. This may need a custom label to clarify this. Eg. &quot;qualify&quot; action might both &quot;accept&quot; and &quot;reject&quot;, but the manual intervention may premap &quot;reject&quot;." minOccurs="0" name="manualName" type="java.lang.String"/>
    <field comment="You can capture whether this action finished successfully (true) or failed (false). It only retains the _last_ execution state. It can be used for conditional situations which depend on certain paths having been taken." minOccurs="0" name="stateSuccessVariable" type="java.lang.String"/>
    <field comment="Once past the capture condition, you can check that the service is allowed to run based on the input of the service and the state of the process." minOccurs="0" name="stateCondition" type="java.lang.String"/>
</structure>
